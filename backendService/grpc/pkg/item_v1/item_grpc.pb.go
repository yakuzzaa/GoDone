// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: item.proto

package item_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ItemV1_ListItem_FullMethodName   = "/item.ItemV1/ListItem"
	ItemV1_GetItem_FullMethodName    = "/item.ItemV1/GetItem"
	ItemV1_CreateItem_FullMethodName = "/item.ItemV1/CreateItem"
	ItemV1_UpdateItem_FullMethodName = "/item.ItemV1/UpdateItem"
	ItemV1_DeleteItem_FullMethodName = "/item.ItemV1/DeleteItem"
)

// ItemV1Client is the client API for ItemV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ItemV1Client interface {
	ListItem(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	GetItem(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	CreateItem(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	UpdateItem(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteItem(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type itemV1Client struct {
	cc grpc.ClientConnInterface
}

func NewItemV1Client(cc grpc.ClientConnInterface) ItemV1Client {
	return &itemV1Client{cc}
}

func (c *itemV1Client) ListItem(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, ItemV1_ListItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemV1Client) GetItem(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, ItemV1_GetItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemV1Client) CreateItem(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, ItemV1_CreateItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemV1Client) UpdateItem(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ItemV1_UpdateItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemV1Client) DeleteItem(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ItemV1_DeleteItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ItemV1Server is the server API for ItemV1 service.
// All implementations must embed UnimplementedItemV1Server
// for forward compatibility
type ItemV1Server interface {
	ListItem(context.Context, *ListRequest) (*ListResponse, error)
	GetItem(context.Context, *GetRequest) (*GetResponse, error)
	CreateItem(context.Context, *CreateRequest) (*CreateResponse, error)
	UpdateItem(context.Context, *UpdateRequest) (*emptypb.Empty, error)
	DeleteItem(context.Context, *DeleteRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedItemV1Server()
}

// UnimplementedItemV1Server must be embedded to have forward compatible implementations.
type UnimplementedItemV1Server struct {
}

func (UnimplementedItemV1Server) ListItem(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListItem not implemented")
}
func (UnimplementedItemV1Server) GetItem(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItem not implemented")
}
func (UnimplementedItemV1Server) CreateItem(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateItem not implemented")
}
func (UnimplementedItemV1Server) UpdateItem(context.Context, *UpdateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateItem not implemented")
}
func (UnimplementedItemV1Server) DeleteItem(context.Context, *DeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItem not implemented")
}
func (UnimplementedItemV1Server) mustEmbedUnimplementedItemV1Server() {}

// UnsafeItemV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ItemV1Server will
// result in compilation errors.
type UnsafeItemV1Server interface {
	mustEmbedUnimplementedItemV1Server()
}

func RegisterItemV1Server(s grpc.ServiceRegistrar, srv ItemV1Server) {
	s.RegisterService(&ItemV1_ServiceDesc, srv)
}

func _ItemV1_ListItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemV1Server).ListItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemV1_ListItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemV1Server).ListItem(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemV1_GetItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemV1Server).GetItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemV1_GetItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemV1Server).GetItem(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemV1_CreateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemV1Server).CreateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemV1_CreateItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemV1Server).CreateItem(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemV1_UpdateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemV1Server).UpdateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemV1_UpdateItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemV1Server).UpdateItem(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemV1_DeleteItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemV1Server).DeleteItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemV1_DeleteItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemV1Server).DeleteItem(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ItemV1_ServiceDesc is the grpc.ServiceDesc for ItemV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ItemV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "item.ItemV1",
	HandlerType: (*ItemV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListItem",
			Handler:    _ItemV1_ListItem_Handler,
		},
		{
			MethodName: "GetItem",
			Handler:    _ItemV1_GetItem_Handler,
		},
		{
			MethodName: "CreateItem",
			Handler:    _ItemV1_CreateItem_Handler,
		},
		{
			MethodName: "UpdateItem",
			Handler:    _ItemV1_UpdateItem_Handler,
		},
		{
			MethodName: "DeleteItem",
			Handler:    _ItemV1_DeleteItem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "item.proto",
}
